/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Locadora.View;

import Locadora.Model.Fabricante;
import Locadora.Model.Modelo;
import Locadora.Repository.ModeloRepository;
import Locadora.Services.FabricanteServices;
import Locadora.Services.ModeloServices;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Image;
import java.awt.event.ComponentAdapter;
import java.awt.event.ComponentEvent;
import java.awt.image.ImageObserver;
import static java.util.Collections.list;
import java.util.List;
import javax.swing.DefaultListModel;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;

/**
 *
 * @author Rodrigo Ortolani
 */
public class CadastroModelos extends javax.swing.JFrame {

   private int idFabricanteSelecionado;
       private List<String> nomesFabricantes;
     
       
    public CadastroModelos(List<String> nomesFabricantes) {
        initComponents();
         adicionarNomesFabricantes(); 
             setBackgroundImage(); 
              setLocationRelativeTo(null); // Define a posição da janela para o centro da tela
        setResizable(false);
    
    // Adiciona um ComponentListener para atualizar a imagem de fundo quando o JFrame for redimensionado
    addComponentListener(new ComponentAdapter() {
        @Override
        public void componentResized(ComponentEvent e) {
            setBackgroundImage();
        }
    });

    }
private void adicionarNomesFabricantes() {
             DefaultListModel<String> model = new DefaultListModel<>();

    // Obtém a lista de fabricantes com seus IDs
    List<Fabricante> fabricantes = new FabricanteServices().consultar();

    // Adiciona os nomes dos fabricantes ao modelo de lista
    for (Fabricante fabricante : fabricantes) {
        // Formata a string para exibir o ID e o nome do fabricante
        String fabricanteString = String.format("%d - %s", fabricante.getId(), fabricante.getNome());
        model.addElement(fabricanteString); // Adiciona o fabricante ao modelo
    }

    // Define o modelo na lista gráfica
    jListFABRICANTES.setModel(model);

    // Define um ouvinte de seleção para a lista de fabricantes
   jListFABRICANTES.addListSelectionListener(new ListSelectionListener() {
    @Override
    public void valueChanged(ListSelectionEvent e) {
        if (!e.getValueIsAdjusting()) {
            // Obtém o índice do item selecionado na lista de fabricantes
            int selectedIndex = jListFABRICANTES.getSelectedIndex();
            if (selectedIndex != -1) {
                // Obtém o texto do item selecionado (formato: "ID - Nome")
                String selectedItem = (String) jListFABRICANTES.getSelectedValue();
                // Divide o texto para extrair o ID
                String[] parts = selectedItem.split(" - ");
                int fabricanteId = Integer.parseInt(parts[0]);
                // Aqui você pode usar o fabricanteId para associá-lo ao modelo
                // que o usuário está prestes a cadastrar
                System.out.println("ID do fabricante selecionado: " + fabricanteId);
                // Defina o ID do fabricante selecionado
                idFabricanteSelecionado = fabricanteId;
            }
        }
    }
});
    // Define a cor do texto na lista gráfica (opcional)
    jListFABRICANTES.setForeground(Color.BLACK);
}

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jListFABRICANTES = new javax.swing.JList<>();
        jLabel1 = new javax.swing.JLabel();
        digiteModelo = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        BTNCADASTRARMODELO = new javax.swing.JButton();
        BTNMENU = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        BTNLISTADEMODELOS = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jListFABRICANTES.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane1.setViewportView(jListFABRICANTES);

        jLabel1.setText("Fabricantes");

        digiteModelo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                digiteModeloActionPerformed(evt);
            }
        });

        jLabel2.setText("Cadastro de Modelos");

        jLabel3.setText("Modelo:");

        BTNCADASTRARMODELO.setText("Cadastrar");
        BTNCADASTRARMODELO.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BTNCADASTRARMODELOActionPerformed(evt);
            }
        });

        BTNMENU.setText("Menu Principal");
        BTNMENU.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BTNMENUActionPerformed(evt);
            }
        });

        jButton1.setText("Novo Fabricante");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        BTNLISTADEMODELOS.setText("Lista de Modelos");
        BTNLISTADEMODELOS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BTNLISTADEMODELOSActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 186, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(10, 10, 10)
                                .addComponent(BTNMENU))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 366, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(12, 12, 12)))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(BTNCADASTRARMODELO)
                                    .addComponent(digiteModelo, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(61, 61, 61)
                                .addComponent(BTNLISTADEMODELOS))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(94, 94, 94)
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jButton1)))
                        .addContainerGap(9, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(BTNMENU))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(2, 2, 2)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(digiteModelo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(BTNCADASTRARMODELO))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(BTNLISTADEMODELOS)))
                .addContainerGap(42, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    
    
    
    
    
    
    
    
    
    class ImagePanel extends JPanel {
    private Image image;

    // Construtor que recebe o caminho da imagem
    public ImagePanel(String imagePath) {
        image = new ImageIcon(imagePath).getImage();
    }

    // Sobrescreve o método paintComponent para desenhar a imagem no JPanel
    protected void paintComponent(Graphics g) {
        super.paintComponent(g);
        g.drawImage(image, 0, 0, getWidth(), getHeight(), (ImageObserver) this);
    }

    // Sobrescreve o método getPreferredSize para definir o tamanho preferido do JPanel
    public Dimension getPreferredSize() {
        return new Dimension(image.getWidth((ImageObserver) this), image.getHeight((ImageObserver) this));
    }
}

    
private void setBackgroundImage() {
    // Caminho absoluto para a imagem
    String imagePath = "C:\\Users\\Rodrigo Ortolani\\Documents\\NetBeansProjects\\Locadora-de-Ve-culos-main\\app\\src\\main\\java\\Locadora\\View\\Imagens\\modelo.jpg";
jLabel1.setForeground(Color.WHITE);
jLabel2.setForeground(Color.WHITE);
jLabel3.setForeground(Color.WHITE);


    try {
        // Carrega a imagem
        Image image = new ImageIcon(imagePath).getImage();

        // Verifica se a imagem foi carregada corretamente
        if (image != null) {
            // Redimensiona a imagem para caber no JFrame
            int contentWidth = getContentPane().getWidth();
            int contentHeight = getContentPane().getHeight();
            Image scaledImage = image.getScaledInstance(contentWidth, contentHeight, Image.SCALE_SMOOTH);

            // Cria um ImageIcon com a imagem redimensionada
            ImageIcon scaledIcon = new ImageIcon(scaledImage);

            // Cria um JLabel para exibir a imagem
            JLabel backgroundLabel = new JLabel(scaledIcon);
            backgroundLabel.setBounds(0, 0, contentWidth, contentHeight);

            // Adiciona o JLabel ao content pane do JFrame
            getContentPane().add(backgroundLabel);

            // Revalida e redesenha o content pane do JFrame para garantir que as mudanças sejam aplicadas
            revalidate();
            repaint();
        } else {
            System.err.println("Erro ao carregar a imagem: " + imagePath);
        }
    } catch (Exception e) {
        e.printStackTrace();
        System.err.println("Erro ao carregar a imagem: " + imagePath);
    }
}

    
    
    
    
    
    
    
    
    
    
    private void digiteModeloActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_digiteModeloActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_digiteModeloActionPerformed

    private void BTNCADASTRARMODELOActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BTNCADASTRARMODELOActionPerformed
        
String nomeModelo = digiteModelo.getText();
    if (!nomeModelo.isEmpty()) {
        if (idFabricanteSelecionado != 0) {
            // Crie um objeto Modelo com o nome do modelo e o ID do fabricante selecionado
Modelo modelo = new Modelo(Long.MIN_VALUE, nomeModelo, Long.valueOf(idFabricanteSelecionado));

            // Chame o método salvar da classe ModeloRepository, passando o novo modelo como argumento
            ModeloRepository modeloRepo = new ModeloRepository();
            modeloRepo.salvarModelo(modelo);

            JOptionPane.showMessageDialog(rootPane,"Modelo Cadastrado com sucesso !!");
        } else {
            JOptionPane.showMessageDialog(rootPane, "Por favor, selecione um fabricante antes de cadastrar um modelo. Caso não contenha o fabricante na lista, por favor, clique em cadastrar fabricantes.");
        }
    } else {
        JOptionPane.showMessageDialog(rootPane, "Por favor, informe o nome do modelo ");
    
    }//GEN-LAST:event_BTNCADASTRARMODELOActionPerformed
    }//GEN-LAST:event_BTNCADASTRARMODELOActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        CadastroFabricantes fabricantes = new CadastroFabricantes(nomesFabricantes);
        fabricantes.setVisible(true);
        
        this.dispose();
        
    }//GEN-LAST:event_jButton1ActionPerformed

    private void BTNMENUActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BTNMENUActionPerformed
        Menu menu = new Menu();

        // Tornar a instância do menu visível
        menu.setVisible(true);

        // Fechar a janela atual
        this.dispose();
    }//GEN-LAST:event_BTNMENUActionPerformed

    private void BTNLISTADEMODELOSActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BTNLISTADEMODELOSActionPerformed

      
    
ModeloServices modeloService = new ModeloServices();
List<Modelo> modelos = modeloService.consultarTodosmodelos();

StringBuilder mensagem = new StringBuilder();
mensagem.append("Lista de Modelos:\n");
mensagem.append("________________________________\n");
for (Modelo modelo : modelos) {
    mensagem.append("ID: ").append(modelo.getId()).append(", ");
    mensagem.append("Modelo: ").append(modelo.getNome()).append(", ");
    mensagem.append("Fabricante: ").append(modelo.getNomeFabricante()).append("\n");
}
mensagem.append("________________________________");

// Criando uma JTextArea para exibir a mensagem
JTextArea textArea = new JTextArea(mensagem.toString());
textArea.setEditable(false); // Impede que o usuário edite o texto

// Criando um JScrollPane e adicionando a JTextArea a ele
JScrollPane scrollPane = new JScrollPane(textArea);

// Configurando a política de rolagem vertical para o JScrollPane
scrollPane.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_ALWAYS);

// Exibindo o diálogo JOptionPane com a JTextArea dentro do JScrollPane
JOptionPane.showMessageDialog(null, scrollPane, "Lista de Modelos", JOptionPane.INFORMATION_MESSAGE);

    }//GEN-LAST:event_BTNLISTADEMODELOSActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CadastroModelos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CadastroModelos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CadastroModelos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CadastroModelos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
             public void run() {
        List<String> nomesFabricantes = new FabricanteServices().obterNomesFabricantes();
        CadastroModelos cadastroModelos = new CadastroModelos(nomesFabricantes);
        cadastroModelos.setVisible(true);
        
        cadastroModelos.setLocationRelativeTo(null);
        
        // Impede o redimensionamento da janela
        cadastroModelos.setResizable(false);
        
        cadastroModelos.setVisible(true);
    }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BTNCADASTRARMODELO;
    private javax.swing.JButton BTNLISTADEMODELOS;
    private javax.swing.JButton BTNMENU;
    private javax.swing.JTextField digiteModelo;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JList<String> jListFABRICANTES;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}

